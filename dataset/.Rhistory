library(devtools)
install.packages("devtools")
library(devtools)
install_github("jason-morgan/ina")
install.packages("installr")
library(installr)
updateR()
install_github("jason-morgan/ina")
library(devtools)
install_github("jason-morgan/ina")
library(sna)
data(cosponsorship)
SenNet <- senlist$net
data(cosponsorship)
data("cosponsorship")
library(ina)
data(cosponsorship)
SenNet <- senlist$net
SenNetBinary <- 1*(SenNet > 9)
conservatism <- dwnom[,1]
node.color <- gray((conservatism-min(conservatism)) /)
node.color <- gray((conservatism-min(conservatism)) / max(conservatism-min(conservatism)))
set.seed(1234)
plot(network(SenNetBinary), vertex, col=node.color, edge.col=rgb(150, 150, 150, 150, maxColorValue=255))
plot(network(SenNetBinary), vertex.col=node.color, edge.col=rgb(150, 150, 150, 150, maxColorValue=255))
library("stringr")
library(stringr)
install.packages("ina")
x <- c()
y <- c()
data2 <- c()
mse <- c()
mse.one <- c()
mse.all <- c()
sqr.bias <- c()
sqr.bias.one <- c()
sqr.bias.all <- c()
variance <- c()
variance.one <- c()
variance.all <- c()
for (j in 1:100) {
for (i in 1:100) {
x[i] <- i/100
y[i] <- 1 + 3*sin(2*pi*x[i] - pi) - 5*(x[i])^2 + rnorm(n=100, mean=0, sd=0.25)
}
data2 <- data.frame(x, y)
for (k in 2:50) {
fit <- lm(data2$y~ cut(data2$x, k) -1)
y_hat <- predict(fit, newdata=data2)
mse[k] <- mean((y_hat-data2$y)^2)
sqr.bias[k] <- (mean(y_hat)-mean(data2$y))^2
variance[k] <- var(y_hat)
}
mse.one <- data.frame(k,mse)
sqr.bias.one <- data.frame(k,sqr.bias)
variance.one <- data.frame(k,variance)
mse.all <- rbind(mse.all, mse.one)
sqr.bias.all <- rbind(sqr.bias.all, sqr.bias.one)
variance.all <- rbind(variance.all, variance.one)
}
View(mse.all)
plot(mse.all)
x <- c()
y <- c()
data2 <- c()
mse <- c()
mse.one <- c()
mse.all <- c()
sqr.bias <- c()
sqr.bias.one <- c()
sqr.bias.all <- c()
variance <- c()
variance.one <- c()
variance.all <- c()
k.all <- c()
for (j in 1:100) {
for (i in 1:100) {
x[i] <- i/100
y[i] <- 1 + 3*sin(2*pi*x[i] - pi) - 5*(x[i])^2 + rnorm(n=100, mean=0, sd=0.25)
}
data2 <- data.frame(x, y)
for (k in 2:50) {
fit <- lm(data2$y~ cut(data2$x, k) -1)
y_hat <- predict(fit, newdata=data2)
mse[k] <- mean((y_hat-data2$y)^2)
sqr.bias[k] <- (mean(y_hat)-mean(data2$y))^2
variance[k] <- var(y_hat)
k.all[k] <- k
}
mse.one <- data.frame(k.all,mse)
sqr.bias.one <- data.frame(k.all,sqr.bias)
variance.one <- data.frame(k.all,variance)
mse.all <- rbind(mse.all, mse.one)
sqr.bias.all <- rbind(sqr.bias.all, sqr.bias.one)
variance.all <- rbind(variance.all, variance.one)
}
plot(mse.all)
plot(sqr.bias.all)
View(sqr.bias.all)
plot(varian.all)
plot(variance.all)
plot(variance.all$variance ~ variance.all$k.all)
library(dplyr)
library(ggplot2)
mse.all %>% group_by(k.all) %>%
summarise(mse.average = mean(mse)) %>%
ggplot(aes(x=k.all, y=mse.average)) +
labs(title="Mean Squared Error as a Function of K")
mse.all %>% group_by(k.all) %>%
summarise(mse.average = mean(mse)) %>%
ggplot(aes(x=k.all, y=mse.average)) +
geom_line() +
labs(title="Mean Squared Error as a Function of K")
mse.all <- na.omit(mse.all)
sqr.bias.all <- na.omit(sqr.bias.all)
variance.all <- na.omit(variance.all)
mse.all %>% group_by(k.all) %>%
summarise(mse.average = mean(mse)) %>%
ggplot(aes(x=k.all, y=mse.average)) +
geom_line() +
labs(title="Mean Squared Error as a Function of K")
sqr.bias.all %>% group_by(k.all) %>%
summarize(sqr.bias.average = mean(sqr.bias)) %>%
ggplot(aes(x=k.all, y=sqr.bias.average)) +
geom_line() +
labs(title="Squred Bias as a Function of K")
variance.all %>% group_by(k.all) %>%
summarize(variance.average = mean(variance)) %>%
geom_line() +
labs(title="Variance as a Function of K")
variance.all %>% group_by(k.all) %>%
summarize(variance.average = mean(variance)) %>%
ggplot(aes(x=k.all, y=variance.average)) +
geom_line() +
labs(title="Variance as a Function of K")
mse.all %>% group_by(k.all) %>%
summarise(mse.average = mean(mse)) %>%
ggplot(aes(x=k.all, y=mse.average)) +
geom_line() +
labs(title="Mean Squared Error as a Function of K")
sqr.bias.all %>% group_by(k.all) %>%
summarize(sqr.bias.average = mean(sqr.bias)) %>%
ggplot(aes(x=k.all, y=sqr.bias.average)) +
geom_line() +
labs(title="Squred Bias as a Function of K")
variance.all %>% group_by(k.all) %>%
summarize(variance.average = mean(variance)) %>%
ggplot(aes(x=k.all, y=variance.average)) +
geom_line() +
labs(title="Variance as a Function of K")
#sigma=0.5
x <- c()
y <- c()
data2 <- c()
mse <- c()
mse.one <- c()
mse.all <- c()
sqr.bias <- c()
sqr.bias.one <- c()
sqr.bias.all <- c()
variance <- c()
variance.one <- c()
variance.all <- c()
k.all <- c()
for (j in 1:1000) {
for (i in 1:100) {
x[i] <- i/100
y[i] <- 1 + 3*sin(2*pi*x[i] - pi) - 5*(x[i])^2 + rnorm(n=100, mean=0, sd=0.5)
}
data2 <- data.frame(x, y)
for (k in 2:50) {
fit <- lm(data2$y~ cut(data2$x, k) -1)
y_hat <- predict(fit, newdata=data2)
mse[k] <- mean((y_hat-data2$y)^2)
sqr.bias[k] <- (mean(y_hat)-mean(data2$y))^2
variance[k] <- var(y_hat)
k.all[k] <- k
}
mse.one <- data.frame(k.all,mse)
sqr.bias.one <- data.frame(k.all,sqr.bias)
variance.one <- data.frame(k.all,variance)
mse.all <- rbind(mse.all, mse.one)
sqr.bias.all <- rbind(sqr.bias.all, sqr.bias.one)
variance.all <- rbind(variance.all, variance.one)
}
#remove missing data
mse.all <- na.omit(mse.all)
sqr.bias.all <- na.omit(sqr.bias.all)
variance.all <- na.omit(variance.all)
#visualize the MSE, bias square, and variance.
library(dplyr)
library(ggplot2)
mse.all %>% group_by(k.all) %>%
summarise(mse.average = mean(mse)) %>%
ggplot(aes(x=k.all, y=mse.average)) +
geom_line() +
labs(title="Mean Squared Error as a Function of K")
sqr.bias.all %>% group_by(k.all) %>%
summarize(sqr.bias.average = mean(sqr.bias)) %>%
ggplot(aes(x=k.all, y=sqr.bias.average)) +
geom_line() +
labs(title="Squred Bias as a Function of K")
variance.all %>% group_by(k.all) %>%
summarize(variance.average = mean(variance)) %>%
ggplot(aes(x=k.all, y=variance.average)) +
geom_line() +
labs(title="Variance as a Function of K")
knitr::opts_chunk$set(echo = TRUE)
x1 = c(3, 2, 4, 1, 2, 4, 4)
x2 = c(4, 2, 4, 4, 1, 3, 1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1, x2, col = colors, xlim = c(0, 5), ylim = c(0, 5))
plot(x1, x2, col = colors, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.5, 1)
plot(x1, x2, col = colors, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.5, 1)
abline(-1, 1, lty = 2)
abline(0, 1, lty = 2)
dendrogram = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow = 4))
plot(hclust(dendrogram, method = "complete"))
plot(hclust(d, method = "single"))
plot(hclust(dendrogram, method = "single"))
plot(hclust(dendrogram, method="complete"), labels=c(2,1,4,3))
library(ISLR)
set.seed(2)
dist(USArrests)
?dist()
hc.complete = hclust(dist(USArrests), method="complete")
plot(hc.complete)
cutree(hc.complete, 3)
sd.data = scale(USArrests)
hc.sd.complete = hclust(dist(sd.data), method="complete")
plot(hc.sd.complete)
cutree(hc.sd.complete, 3)
table(cutree(hc.sd.complete, 3), cutree(hc.complete, 3))
table(cutree(hc.sd.complete, 3), cutree(hc.complete, 3))
setwd("C:/Users/li.7232/OneDrive - The Ohio State University/NewsArticleClassification/dataset")
test <- read.csv("content_paragraphs_ready.csv", header = TRUE)
View(test)
View(test)
